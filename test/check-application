#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/common/pywrap", sys.argv)
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/main/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys
import datetime
import time

# import Cockpit's machinery for test VMs and its browser test API
import testlib  # noqa


class TestApplication(testlib.MachineCase):
    def setUp(self):
        super().setUp()

        # When we disconnect while certmonger wants to tell us something
        self.allow_journal_messages("org.fedorahosted.certmonger: couldn't introspect /org/fedorahosted/certmonger/.*Remote peer disconnected")

    def cleanupCertificate(self, cert_name, db_path):
        output = self.machine.execute("getcert list -d {0} -n {1} || exit 0".format(db_path, cert_name))
        if cert_name in output:
            self.machine.execute("selfsign-getcert stop-tracking -d {0} -n {1}".format(db_path, cert_name))

    def cleanupFileCertificate(self, cert_path, key_path):
        output = self.machine.execute("getcert list -f {0} || exit 0".format(cert_path))
        if cert_path in output:
            self.machine.execute("selfsign-getcert stop-tracking -k {0} -f {1}".format(key_path, cert_path))
            self.machine.execute("rm {0} {1} || exit 0".format(key_path, cert_path))

    def selectKeyTab(self, row):
        self.browser.click(f"#expanded-content{row} li:nth-child(2) button")

    def selectCertificateTab(self, row):
        self.browser.click(f"#expanded-content{row} li:nth-child(3) button")

    @testlib.nondestructive
    def testEmptyState(self):
        b = self.browser
        m = self.machine

        # Check service was started automatically when when first entering certficates page
        m.execute("systemctl stop certmonger.service")

        self.login_and_go("/certificates")

        b.wait_visible("table .pf-v5-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check Empty State is present if service was stopped when certificates page is open
        # Mask the unit so it doesn't get activated if requests are still running.
        m.execute("systemctl mask --runtime certmonger")
        m.execute("systemctl stop certmonger.service")
        b.wait_visible(".pf-v5-c-empty-state")
        m.execute("systemctl unmask --runtime certmonger")

        # Check Starting service from UI works
        b.click(".pf-v5-c-empty-state button:contains(Start the certificate service)")

        b.wait_visible("table .pf-v5-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check check stopping and starting UI from command line reflects state of UI
        m.execute("systemctl stop certmonger.service")
        b.wait_visible(".pf-v5-c-empty-state")

        m.execute("systemctl start certmonger.service")
        b.wait_visible("table .pf-v5-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

    @testlib.nondestructive
    def testNoCertificates(self):
        b = self.browser

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_in_text(".ct-table-empty tr td", "No certificate is tracked on this host")

    @testlib.nondestructive
    def testWarningExpiredCert(self):
        b = self.browser
        m = self.machine

        self.restore_file('/etc/certmonger/certmonger.conf', "systemctl restart certmonger")

        cert_name = "Server-Cert1"
        db_path = "/etc/pki/nssdb"
        # Request certificate without automatical renewal
        m.execute("selfsign-getcert request -d {0} -n {1} -R".format(db_path, cert_name))
        self.addCleanup(self.cleanupCertificate, cert_name, db_path)

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate validity doesn't contain a warning
        b.wait_not_present("#certificate-0-validity .ct-icon-exclamation-triangle")

        # Remove cert
        m.execute("selfsign-getcert stop-tracking -d {0} -n {1}".format(db_path, cert_name))
        self.browser.reload()
        self.browser.enter_page('/certificates')

        # Change validity of new certs to 2 weeks
        cert_name = 'Server-Cert2'
        m.execute("echo -e '[selfsign]\nvalidity_period = 2w' > /etc/certmonger/certmonger.conf")
        m.execute("systemctl restart certmonger.service")
        m.execute("selfsign-getcert request -d {0} -n {1} -R".format(db_path, cert_name))
        self.addCleanup(self.cleanupCertificate, cert_name, db_path)

        # Check warning about near expiration
        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_visible("#certificate-0-validity .ct-icon-exclamation-triangle")

        # Remove cert
        m.execute("selfsign-getcert stop-tracking -d {0} -n {1}".format(db_path, cert_name))
        self.browser.reload()
        self.browser.enter_page('/certificates')

        # Change validity of new certs to 1 second
        m.execute("echo -e '[selfsign]\nvalidity_period = 1s' > /etc/certmonger/certmonger.conf")
        m.execute("systemctl restart certmonger.service")
        # Wait 4 seconds after requesting which should make the certificate already expired
        # TODO requesting itself takes some time and 4 seconds might now be enough.
        # Fix this if race condition starts to show up
        cert_name = "Server-Cert3"
        m.execute("selfsign-getcert request -d {0} -n {1} -R && sleep 4".format(db_path, cert_name))
        self.addCleanup(self.cleanupCertificate, cert_name, db_path)

        self.browser.reload()
        self.browser.enter_page('/certificates')
        # Check error about expired certificate
        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_visible("#certificate-0-validity .ct-icon-times-circle")

    @testlib.nondestructive
    def testModifyAutorenewal(self):
        b = self.browser
        m = self.machine

        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name))
        self.addCleanup(self.cleanupCertificate, cert_name, db_path)

        self.login_and_go("/certificates")

        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_in_text("#certificate-0-name", cert_name)

        b.click("button#expand-togglecertificate-0")
        # Check General tab
        renewal_state = b.get_checked("#certificate-0-general-autorenewal")
        b.set_checked("#certificate-0-general-autorenewal", not renewal_state)
        b.wait_visible("#certificate-0-general-autorenewal:not(:checked)")

        command_output = m.execute("selfsign-getcert list -d {0} -n {1} | grep 'auto-renew:' | awk '{{print $2}}'".format(db_path, cert_name))
        if not renewal_state:  # renewal state updated to the opposite
            self.assertEqual(command_output, "yes\n")
        else:
            self.assertEqual(command_output, "no\n")

    @testlib.nondestructive
    def testNssdbCert(self):
        b = self.browser
        m = self.machine

        date_now = datetime.datetime.now()
        next_year = date_now.replace(year = date_now.year + 1)
        next_year_str = next_year.strftime('%-m/%-d/%Y')

        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name))
        self.addCleanup(self.cleanupCertificate, cert_name, db_path)

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check cert header
        b.wait_in_text("#certificate-0-name", cert_name)
        b.wait_in_text("#certificate-0-validity", "Auto-renews before {0}".format(next_year_str))
        b.wait_in_text("#certificate-0-ca", "Self-signed")

        b.click("button#expand-togglecertificate-0")
        # Check General tab
        b.wait_in_text("#certificate-0-general-status", "Monitoring")
        b.wait_in_text("#certificate-0-general-ca", "Self-signed")
        b.wait_in_text("#certificate-0-general-validity", " to {0}".format(next_year_str))  # TODO better date handling
        self.assertEqual(b.get_checked("#certificate-0-general-autorenewal"), True)

        self.selectKeyTab(0)
        # Check Key tab
        b.wait_in_text("#certificate-0-key-nickname", cert_name)
        b.wait_in_text("#certificate-0-key-type", "RSA")
        b.wait_in_text("#certificate-0-key-token", "NSS Certificate DB")
        b.wait_in_text("#certificate-0-key-storage", "NSSDB")
        b.wait_in_text("#certificate-0-key-location", db_path)

        self.selectCertificateTab(0)
        # Check Cert tab
        b.wait_in_text("#certificate-0-cert-nickname", cert_name)
        b.wait_in_text("#certificate-0-cert-token", "NSS Certificate DB")
        b.wait_in_text("#certificate-0-cert-storage", "NSSDB")
        b.wait_in_text("#certificate-0-cert-location", db_path)

    # Test subscription to Dbus PropertyChanged signal which is emmitted when property of
    # dbus object is changed
    # Check whetever UI is dynamically updated
    @testlib.nondestructive
    def testDbusPropertyChanged(self):
        b = self.browser
        m = self.machine

        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))
        self.addCleanup(self.cleanupFileCertificate, cert_path, key_path)

        self.login_and_go("/certificates")

        b.click("button#expand-togglecertificate-0")
        # Check General tab
        validity = b.text("#certificate-0-general-validity")

        # If we resubmit in the same minute in which we created the certificate no visual change
        time.sleep(61)

        # Renew a certificate
        m.execute("selfsign-getcert resubmit -f {0}".format(cert_path))
        # Check validity time changed
        b.wait_not_in_text("#certificate-0-general-validity", validity)

    @testlib.nondestructive
    def testFileCert(self):
        b = self.browser
        m = self.machine

        date_now = datetime.datetime.now()
        next_year = date_now.replace(year = date_now.year + 1)
        next_year_str = next_year.strftime('%-m/%-d/%Y')

        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))
        self.addCleanup(self.cleanupFileCertificate, cert_path, key_path)

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check cert header
        b.wait_in_text("#certificate-0-validity", "Auto-renews before {0}".format(next_year_str))
        b.wait_in_text("#certificate-0-ca", "Self-signed")

        b.click("button#expand-togglecertificate-0")
        # Check General tab
        b.wait_in_text("#certificate-0-general-status", "Monitoring")
        b.wait_in_text("#certificate-0-general-ca", "Self-signed")
        b.wait_in_text("#certificate-0-general-validity", " to {0}".format(next_year_str))
        self.assertEqual(b.get_checked("#certificate-0-general-autorenewal"), True)

        # Check Key tab
        self.selectKeyTab(0)
        b.wait_in_text("#certificate-0-key-type", "RSA")
        b.wait_in_text("#certificate-0-key-storage", "FILE")
        b.wait_in_text("#certificate-0-key-location", key_path)

        self.selectCertificateTab(0)
        # Check Cert tab
        b.wait_in_text("#certificate-0-cert-storage", "FILE")
        b.wait_in_text("#certificate-0-cert-location", cert_path)

    @testlib.nondestructive
    def testRemoveCert(self):
        b = self.browser
        m = self.machine

        # Test removal of NSSDB-stored certificate
        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name))
        self.addCleanup(self.cleanupCertificate, cert_name, db_path)

        cert_name2 = "Server-Cert2"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name2))
        self.addCleanup(self.cleanupCertificate, cert_name2, db_path)

        self.login_and_go("/certificates")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate is present
        b.wait_in_text("#certificate-0-name", cert_name)

        # Remove certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-v5-c-modal-box__title", "Remove certificate")
        b.wait_not_present("#certificate-0-delete-files")  # Check delete files option is not present for NSSDB-stored certificate
        b.click(".pf-v5-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-v5-c-modal-box")

        b.wait_in_text("#certificate-0-name", cert_name2)

        # Remove second certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-v5-c-modal-box__title", "Remove certificate")
        b.click(".pf-v5-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-v5-c-modal-box")

        # Check cert is not present
        b.wait_not_present("#certificate-0-name")

        # Test removal of files based certificate. Remove without deleting files
        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))
        self.addCleanup(self.cleanupFileCertificate, cert_path, key_path)

        self.login_and_go("/certificates")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate is present
        b.wait_visible("#certificate-0-name")

        # Remove certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-v5-c-modal-box__title", "Remove certificate")
        b.wait_visible("#certificate-0-delete-files")  # Check delete files option is not present for NSSDB-stored certificate
        b.click(".pf-v5-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-v5-c-modal-box")

        # Check cert is not present
        b.wait_not_present("#certificate-0-name")
        # Check files were left untouched
        m.execute("test -f {0}; test -f {1}".format(cert_path, key_path))

        # Test removal of files based certificate. Remove without deleting files
        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))
        self.addCleanup(self.cleanupFileCertificate, cert_path, key_path)

        self.login_and_go("/certificates")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate is present
        b.wait_visible("#certificate-0-name")

        # Remove certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-v5-c-modal-box__title", "Remove certificate")
        b.click("#certificate-0-delete-files")  # Check delete files option is not present for NSSDB-stored certificate
        b.click(".pf-v5-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-v5-c-modal-box")

        # Check cert is not present
        b.wait_not_present("#certificate-0-name")
        # Check files were deleted
        m.execute("! test -f {0}; ! test -f {1}".format(cert_path, key_path))

    @testlib.nondestructive
    def testRequestCert(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        class RequestCertDialog(object):
            def __init__(
                self, test_obj, ca="SelfSign", storage_type="NSSDB", nickname=None,
                key_path="", cert_path="", subject_name=None, dns_name=None, principal_name=None
            ):
                self.test_obj = test_obj
                self.ca = ca
                self.storage_type = storage_type
                self.nickname = nickname
                self.cert_path = cert_path
                self.key_path = key_path
                self.subject_name = subject_name
                self.dns_name = dns_name
                self.principal_name = principal_name

            def execute(self):
                self.open()
                self.fill()
                self.create()
                self.verify_frontend()
                self.verify_backend()
                self.cleanup()

            def open(self):
                b.click("#request-certificate-action")
                b.wait_in_text(".pf-v5-c-modal-box .pf-v5-c-modal-box__header .pf-v5-c-modal-box__title", "Request certificate")

            def fill(self):
                if self.ca:
                    b.select_from_dropdown("#ca", self.ca)
                if self.storage_type:
                    b.click(".pf-v5-c-radio__input + label:contains({0})".format(self.storage_type))

                if self.storage_type == "NSSDB":
                    if self.nickname:
                        b.set_input_text("#nickname", self.nickname)
                else:
                    b.set_input_text("input[placeholder='Path to store the certificate']", self.cert_path)
                    b.click("#cert-file .pf-v5-c-select__menu-item")
                    b.set_input_text("input[placeholder='Path to store the generated key or to an existing key']", self.key_path)
                    b.click("#key-file .pf-v5-c-select__menu-item")

                if self.subject_name or self.dns_name or self.principal_name:
                    b.click("#set-signing-parameters")

                    if self.subject_name:
                        b.set_input_text("#subject-name", self.subject_name)
                    if self.dns_name:
                        b.set_input_text("#dns-name", self.dns_name)
                    if self.principal_name:
                        b.set_input_text("#principal-name", self.principal_name)

            def cancel(self):
                b.click(".pf-v5-c-modal-box__footer button:contains(Cancel)")
                b.wait_not_present(".pf-v5-c-modal-box")

            def create(self):
                b.click(".pf-v5-c-modal-box__footer button:contains(Request)")
                b.wait_not_present(".pf-v5-c-modal-box")
                if self.storage_type == "NSSDB":
                    # First issued certificate uses an autogenerated nickname
                    nickname = self.nickname if self.nickname else b.text("#certificate-0-name")
                    self.test_obj.addCleanup(self.test_obj.cleanupCertificate, nickname, self.cert_path)
                else:
                    self.test_obj.addCleanup(self.test_obj.cleanupFileCertificate, self.cert_path, self.key_path)
                time.sleep(4)  # Certificate enrollment takes some time

            def verify_frontend(self):
                if not self.ca:
                    self.ca = b.text("#certificate-0-ca")
                if self.storage_type == "NSSDB" and not self.nickname:
                    self.nickname = b.text("#certificate-0-name")

                b.click("button#expand-togglecertificate-0")

                if self.subject_name:
                    b.wait_in_text("#certificate-0-general-subject", self.subject_name)
                if self.principal_name:
                    b.wait_in_text("#certificate-0-general-principal", self.principal_name)
                if self.dns_name:
                    b.wait_in_text("#certificate-0-general-dns", self.dns_name)

                if self.storage_type == "NSSDB":
                    b.wait_in_text("#certificate-0-name", self.nickname)
                    self.test_obj.selectCertificateTab(0)
                    b.wait_in_text("#certificate-0-cert-storage", "NSSDB")
                    self.test_obj.selectKeyTab(0)
                    b.wait_in_text("#certificate-0-key-storage", "NSSDB")
                else:
                    if self.key_path:
                        self.test_obj.selectKeyTab(0)
                        b.wait_in_text("#certificate-0-key-location", self.key_path)
                    if self.cert_path:
                        self.test_obj.selectCertificateTab(0)
                        b.wait_in_text("#certificate-0-cert-location", self.cert_path)

            def verify_backend(self):

                if self.storage_type == "NSSDB":
                    command_output = m.execute("getcert list -d /etc/pki/nssdb -n {0} -c {1} | grep 'key pair storage:' | awk '{{print $4}}'".format(self.nickname, self.ca))
                    self.test_obj.assertIn(command_output.strip(), "type=NSSDB,location='/etc/pki/nssdb',nickname='{0}',token='NSS\n".format(self.nickname))
                    command_output = m.execute("getcert list -d /etc/pki/nssdb -n {0} -c {1} | grep 'certificate:' | awk '{{print $2}}'".format(self.nickname, self.ca))
                    self.test_obj.assertIn(command_output.strip(), "type=NSSDB,location='/etc/pki/nssdb',nickname='{0}',token='NSS\n".format(self.nickname))
                elif self.storage_type == "File":
                    command_output = m.execute("getcert list -f {0} -c {1} | grep 'key pair storage:' | awk '{{print $4}}'".format(self.cert_path, self.ca))
                    self.test_obj.assertEqual(command_output, "type=FILE,location='{0}'\n".format(self.key_path))
                    command_output = m.execute("getcert list -f {0} -c {1} | grep 'certificate:' | awk '{{print $2}}'".format(self.cert_path, self.ca))
                    self.test_obj.assertEqual(command_output, "type=FILE,location='{0}'\n".format(self.cert_path))

            def cleanup(self):
                if self.storage_type == "NSSDB":
                    m.execute("getcert stop-tracking -d /etc/pki/nssdb -n {0} -c {1}".format(self.nickname, self.ca))
                else:
                    m.execute("getcert stop-tracking -f {0} -k {1} -c {2}".format(self.cert_path, self.key_path, self.ca))
                b.reload()
                b.enter_page('/certificates')

        # Test certificate request with everything pre-generated.
        RequestCertDialog(
            self,
        ).execute()

        # Test request of basic NSSDB stored certificate
        RequestCertDialog(
            self,
            ca="SelfSign",
            nickname="testcert1",
            storage_type="NSSDB",
        ).execute()

        # Test request of basic system file stored certificate
        RequestCertDialog(
            self,
            ca="SelfSign",
            cert_path="/etc/pki/tls/certs/testcert2.cert",
            key_path="/etc/pki/tls/private/testkey2.key",
            storage_type="File",
        ).execute()

        # Test subject name, dns name and principal name
        RequestCertDialog(
            self,
            nickname="testcert3",
            storage_type="NSSDB",
            subject_name="TEST_HOSTNAME",
            dns_name="example.com",
            principal_name="HTTP/TEST_HOSTNAME",
        ).execute()

    @testlib.nondestructive
    def testImportCert(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        class ImportCertDialog(object):
            def __init__(
                self, test_obj, ca="SelfSign", storage_type="File",
                key_path="", cert_path="", subject_name=None, dns_name=None, principal_name=None,
            ):
                self.test_obj = test_obj
                self.ca = ca
                self.storage_type = storage_type
                self.cert_path = cert_path
                self.key_path = key_path
                self.subject_name = subject_name
                self.dns_name = dns_name
                self.principal_name = principal_name

            def execute(self):
                self.open()
                self.fill()
                self.create()
                self.verify_backend()
                self.verify_frontend()
                self.cleanup()

            def open(self):
                b.click("#import-certificate-action")
                b.wait_in_text(".pf-v5-c-modal-box .pf-v5-c-modal-box__header .pf-v5-c-modal-box__title", "Import certificate")

            def fill(self):
                if self.ca:
                    b.select_from_dropdown("#ca", self.ca)

                b.set_input_text("input[placeholder='Path to an existing certificate file']", self.cert_path)
                b.click("#cert-file .pf-v5-c-select__menu-item")
                b.set_input_text("input[placeholder='Path to an existing key file']", self.key_path)
                b.click("#key-file .pf-v5-c-select__menu-item")

            def cancel(self):
                b.click(".pf-v5-c-modal-box__footer button:contains(Cancel)")
                b.wait_not_present(".modal-dialog")

            def create(self):
                b.click(".pf-v5-c-modal-box__footer button:contains(Import)")
                b.wait_not_present(".modal-dialog")

            def verify_frontend(self):
                b.click("button#expand-togglecertificate-0")

                b.wait_in_text("#certificate-0-general-subject", self.subject_name)
                b.wait_in_text("#certificate-0-general-principal", self.principal_name)
                b.wait_in_text("#certificate-0-general-dns", self.dns_name)

                self.test_obj.selectKeyTab(0)
                b.wait_in_text("#certificate-0-key-location", self.key_path)
                self.test_obj.selectCertificateTab(0)
                b.wait_in_text("#certificate-0-cert-location", self.cert_path)

            def verify_backend(self):
                command_output = m.execute("getcert list -f {0} | grep 'subject:' | awk '{{print $2}}'".format(self.cert_path))
                self.test_obj.assertEqual(command_output, "CN={0}\n".format(self.subject_name))
                command_output = m.execute("getcert list -f {0} | grep 'dns:' | awk '{{print $2}}'".format(self.cert_path))
                self.test_obj.assertEqual(command_output, "{0}\n".format(self.dns_name))
                command_output = m.execute("getcert list -f {0} | grep 'principal name:' | awk '{{print $3}}'".format(self.cert_path))
                self.test_obj.assertEqual(command_output, "{0}\n".format(self.principal_name))
                command_output = m.execute("getcert list -f {0} | grep 'key pair storage:' | awk '{{print $4}}'".format(self.cert_path))
                self.test_obj.assertEqual(command_output, "type=FILE,location='{0}'\n".format(self.key_path))
                command_output = m.execute("getcert list -f {0} | grep 'certificate:' | awk '{{print $2}}'".format(self.cert_path))
                self.test_obj.assertEqual(command_output, "type=FILE,location='{0}'\n".format(self.cert_path))

            def cleanup(self):
                m.execute("selfsign-getcert stop-tracking -f {0} -k {1}".format(self.cert_path, self.key_path))
                b.reload()
                b.enter_page('/certificates')

        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        subject_name = "TEST_HOSTNAME"
        dns_name = "example.com"
        principal_name = "TEST_HOSTNAME@REDHAT.COM"
        # Request certificate which would result with a cert file with specified subject name, dns name and principal name
        m.execute("selfsign-getcert request -f {0} -k {1} -N 'CN={2}' -D {3} -K {4}".format(cert_path, key_path, subject_name, dns_name, principal_name))
        testlib.wait(lambda: "MONITORING" in m.execute("selfsign-getcert list -f {0}".format(cert_path)), delay=1)
        self.addCleanup(self.cleanupFileCertificate, cert_path, key_path)
        # Stop tracking the cert. Files should be left untouched.
        m.execute("selfsign-getcert stop-tracking -f {0}".format(cert_path, key_path))
        b.reload()
        b.enter_page('/certificates')

        # Test importing the file
        # Point of this test is to see if after importing a certificate from certificate file will
        # result in a certificate with correct subject name, dns name and principal name without
        # need to specify it in the UI. That means that importing went properly.
        ImportCertDialog(
            self,
            ca="SelfSign",
            cert_path=cert_path,
            key_path=key_path,
            storage_type="File",
            subject_name=subject_name,
            dns_name=dns_name,
            principal_name=principal_name,
        ).execute()

    def testResubmitCert(self):
        b = self.browser
        m = self.machine

        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        dns_name = "example.com"
        m.execute("selfsign-getcert request -d {0} -n {1} -D {2}".format(db_path, cert_name, dns_name))
        self.addCleanup(self.cleanupCertificate, cert_name, db_path)

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        b.wait_in_text("#certificate-0-name", cert_name)
        b.click("button#expand-togglecertificate-0")

        b.wait_not_present("#certificate-0-general-principal")
        b.wait_in_text("#certificate-0-general-dns", dns_name)

        # Resubmit certificate with different signing request parameters
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-resubmit a")
        b.wait_in_text(".pf-v5-c-modal-box .pf-v5-c-modal-box__header .pf-v5-c-modal-box__title", "Resubmit Certificate")

        # Change signing request propertes for resubmit
        subject_name = "CN=TEST_HOSTAME"
        principal_name = "TEST_HOSTNAME@REDHAT.COM"
        b.set_input_text("#subject-name", subject_name)
        b.set_input_text("#principal-name", principal_name)
        b.set_input_text("#dns-name", "")  # Remove DNS name

        old_validity = m.execute("selfsign-getcert list -d %s -n %s | grep 'issued:'" % (db_path, cert_name)).strip()

        # make sure the resubmition is done at least 1 second after the certificate was created
        # This enables us to confirm success of resubmition by looking whetever date of issue of certificate, shown in seconds, changed
        time.sleep(1)
        b.click(".pf-v5-c-modal-box__footer button:contains(Resubmit)")
        b.wait_not_present(".pf-v5-c-modal-box")

        # Check validity time differs which means certificate was resubmitted and renewed
        testlib.wait(lambda: old_validity not in m.execute("selfsign-getcert list -d %s -n %s | grep 'issued:'" % (db_path, cert_name)).strip(), delay=1)

        # Check signing properties are updated
        b.wait_in_text("#certificate-0-general-subject", subject_name)
        b.wait_in_text("#certificate-0-general-principal", principal_name)
        b.wait_not_present("#certificate-0-general-dns")


if __name__ == '__main__':
    testlib.test_main()
