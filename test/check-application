#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys
import datetime
import time

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib
from testlib import nondestructive


class TestApplication(testlib.MachineCase):
    def setUp(self):
        super().setUp()

        # When we disconnect while certmonger wants to tell us something
        self.allow_journal_messages("org.fedorahosted.certmonger: couldn't introspect /org/fedorahosted/certmonger/.*Remote peer disconnected")

    @nondestructive
    def testEmptyState(self):
        b = self.browser
        m = self.machine

        # Check service was started automatically when when first entering certficates page
        m.execute("systemctl stop certmonger.service")

        self.login_and_go("/certificates")

        b.wait_visible("table .pf-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check Empty State is present if service was stopped when certificates page is open
        m.execute("systemctl stop certmonger.service")
        b.wait_visible(".pf-c-empty-state")

        # Check Starting service from UI works
        b.click(".pf-c-empty-state button:contains(Start the certificate service)")

        b.wait_visible("table .pf-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check check stopping and starting UI from command line reflects state of UI
        m.execute("systemctl stop certmonger.service")
        b.wait_visible(".pf-c-empty-state")

        m.execute("systemctl start certmonger.service")
        b.wait_visible("table .pf-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

    @nondestructive
    def testNoCertificates(self):
        b = self.browser

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_in_text(".ct-table-empty tr td", "No certificate is tracked on this host")

    def testWarningExpiredCert(self):
        b = self.browser
        m = self.machine

        db_path = "/etc/pki/nssdb"
        # Request certificate without automatical renewal
        m.execute("selfsign-getcert request -d {0} -n {1} -R".format(db_path, "Server-Cert1"))

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate validity doesn't containt warning
        b.wait_not_present("#certificate-0-validity .ct-icon-exclamation-triangle")

        # Remove cert
        m.execute("selfsign-getcert stop-tracking -d {0} -n {1}".format(db_path, "Server-Cert1"))
        self.browser.reload()
        self.browser.enter_page('/certificates')

        # Change validity of new certs to 2 weeks
        m.execute("echo -e '[selfsign]\nvalidity_period = 2w' > /etc/certmonger/certmonger.conf")
        m.execute("systemctl restart certmonger.service")
        m.execute("selfsign-getcert request -d {0} -n {1} -R".format(db_path, "Server-Cert2"))

        # Check warning about near expiration
        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_visible("#certificate-0-validity .ct-icon-exclamation-triangle")

        # Remove cert
        m.execute("selfsign-getcert stop-tracking -d {0} -n {1}".format(db_path, "Server-Cert2"))
        self.browser.reload()
        self.browser.enter_page('/certificates')

        # Change validity of new certs to 1 second
        m.execute("echo -e '[selfsign]\nvalidity_period = 1s' > /etc/certmonger/certmonger.conf")
        m.execute("systemctl restart certmonger.service")
        # Wait 4 seconds after requesting which should make the certificate already expired
        # TODO requesting itself takes some time and 4 seconds might now be enough.
        # Fix this if race condition starts to show up
        m.execute("selfsign-getcert request -d {0} -n {1} -R && sleep 4".format(db_path, "Server-Cert3"))

        self.browser.reload()
        self.browser.enter_page('/certificates')
        # Check error about expired certificate
        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_visible("#certificate-0-validity .ct-icon-times-circle")

    def testModifyAutorenewal(self):
        b = self.browser
        m = self.machine

        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name))

        self.login_and_go("/certificates")

        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_in_text("#certificate-0-name", cert_name)

        b.click("button#expandable-toggle0")
        # Check General tab
        renewal_state = b.get_checked("#certificate-0-general-autorenewal")
        b.set_checked("#certificate-0-general-autorenewal", not renewal_state)
        b.wait_visible("#certificate-0-general-autorenewal:not(:checked)")

        command_output = m.execute("selfsign-getcert list -d {0} -n {1} | grep 'auto-renew:' | awk '{{print $2}}'".format(db_path, cert_name))
        if not renewal_state: # renewal state updated to the opposite
            self.assertEqual(command_output, "yes\n")
        else:
            self.assertEqual(command_output, "no\n")

    def testNssdbCert(self):
        b = self.browser
        m = self.machine

        next_year = datetime.datetime.now() + datetime.timedelta(days=365)
        next_year_str = next_year.strftime('%m/%d/%Y')

        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name))

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check cert header
        b.wait_in_text("#certificate-0-name", cert_name)
        b.wait_in_text("#certificate-0-validity", "Auto-renews before {0}".format(next_year_str))
        b.wait_in_text("#certificate-0-ca", "Self-signed")

        b.click("button#expandable-toggle0")
        # Check General tab
        b.wait_in_text("#certificate-0-general-status", "Monitoring")
        b.wait_in_text("#certificate-0-general-ca", "Self-signed")
        b.wait_in_text("#certificate-0-general-validity", " to {0}".format(next_year_str)) # TODO better date handling
        self.assertEqual(b.get_checked("#certificate-0-general-autorenewal"), True)

        b.click("#certificate-0-keys-tab")
        # Check Key tab
        b.wait_in_text("#certificate-0-key-nickname", cert_name)
        b.wait_in_text("#certificate-0-key-type", "RSA")
        b.wait_in_text("#certificate-0-key-token", "NSS Certificate DB")
        b.wait_in_text("#certificate-0-key-storage", "NSSDB")
        b.wait_in_text("#certificate-0-key-location", db_path)

        b.click("#certificate-0-cert-tab")
        # Check Cert tab
        b.wait_in_text("#certificate-0-cert-nickname", cert_name)
        b.wait_in_text("#certificate-0-cert-token", "NSS Certificate DB")
        b.wait_in_text("#certificate-0-cert-storage", "NSSDB")
        b.wait_in_text("#certificate-0-cert-location", db_path)

    # Test subscription to Dbus PropertyChanged signal which is emmitted when property of
    # dbus object is changed
    # Check whetever UI is dynamically updated
    def testDbusPropertyChanged(self):
        b = self.browser
        m = self.machine

        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))

        self.login_and_go("/certificates")

        b.click("button#expandable-toggle0")
        # Check General tab
        validity = b.text("#certificate-0-general-validity")

        # If we resubmit in the same minute in which we created the certificate no visual change
        time.sleep(61)

        # Renew a certificate
        m.execute("selfsign-getcert resubmit -f {0}".format(cert_path))
        # Check validity time changed
        b.wait_not_in_text("#certificate-0-general-validity", validity)

    def testFileCert(self):
        b = self.browser
        m = self.machine

        next_year = datetime.datetime.now() + datetime.timedelta(days=365)
        next_year_str = next_year.strftime('%m/%d/%Y')

        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check cert header
        b.wait_in_text("#certificate-0-validity", "Auto-renews before {0}".format(next_year_str))
        b.wait_in_text("#certificate-0-ca", "Self-signed")

        b.click("button#expandable-toggle0")
        # Check General tab
        b.wait_in_text("#certificate-0-general-status", "Monitoring")
        b.wait_in_text("#certificate-0-general-ca", "Self-signed")
        b.wait_in_text("#certificate-0-general-validity", " to {0}".format(next_year_str))
        self.assertEqual(b.get_checked("#certificate-0-general-autorenewal"), True)

        b.click("#certificate-0-keys-tab")
        # Check Key tab
        b.wait_in_text("#certificate-0-key-type", "RSA")
        b.wait_in_text("#certificate-0-key-storage", "FILE")
        b.wait_in_text("#certificate-0-key-location", key_path)

        b.click("#certificate-0-cert-tab")
        # Check Cert tab
        b.wait_in_text("#certificate-0-cert-storage", "FILE")
        b.wait_in_text("#certificate-0-cert-location", cert_path)

    def testRemoveCert(self):
        b = self.browser
        m = self.machine

        # Test removal of NSSDB-stored certificate
        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name))

        cert_name2 = "Server-Cert2"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name2))

        self.login_and_go("/certificates")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate is present
        b.wait_in_text("#certificate-0-name", cert_name)

        # Remove certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-c-modal-box__title", "Remove Certificate")
        b.wait_not_present("#certificate-0-delete-files") # Check delete files option is not present for NSSDB-stored certificate
        b.click(".pf-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-c-modal-box")

        b.wait_in_text("#certificate-0-name", cert_name2)

        # Remove second certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-c-modal-box__title", "Remove Certificate")
        b.click(".pf-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-c-modal-box")

        # Check cert is not present
        b.wait_not_present("#certificate-0-name")

        # Test removal of files based certificate. Remove without deleting files
        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))

        self.login_and_go("/certificates")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate is present
        b.wait_visible("#certificate-0-name")

        # Remove certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-c-modal-box__title", "Remove Certificate")
        b.wait_visible("#certificate-0-delete-files") # Check delete files option is not present for NSSDB-stored certificate
        b.click(".pf-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-c-modal-box")

        # Check cert is not present
        b.wait_not_present("#certificate-0-name")
        # Check files were left untouched
        m.execute("test -f {0}; test -f {1}".format(cert_path, key_path))

        # Test removal of files based certificate. Remove without deleting files
        cert_path = "/etc/pki/tls/certs/myCert.cert"
        key_path = "/etc/pki/tls/private/myKey.key"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))

        self.login_and_go("/certificates")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check certificate is present
        b.wait_visible("#certificate-0-name")

        # Remove certificate
        b.click("#certificate-0-action-kebab button")
        b.click("#certificate-0-remove a")
        b.wait_in_text(".pf-c-modal-box__title", "Remove Certificate")
        b.click("#certificate-0-delete-files") # Check delete files option is not present for NSSDB-stored certificate
        b.click(".pf-c-modal-box__footer button:contains(Remove)")
        b.wait_not_present(".pf-c-modal-box")

        # Check cert is not present
        b.wait_not_present("#certificate-0-name")
        # Check files were deleted
        m.execute("! test -f {0}; ! test -f {1}".format(cert_path, key_path))

    def testRequestCert(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        class RequestCertDialog(object):
            def __init__(
                self, test_obj, ca=None, storage_type="NSSDB", nickname=None,
                key_path="", cert_path=""
            ):
                self.test_obj = test_obj
                self.ca = ca
                self.storage_type = storage_type
                self.nickname = nickname
                self.cert_path = cert_path
                self.key_path = key_path

            def execute(self):
                self.open()
                self.fill()
                self.create()
                self.verify_frontend()
                self.verify_backend()
                self.cleanup()

            def open(self):
                b.click("#request-certificate-action")
                b.wait_in_text(".pf-c-modal-box .pf-c-modal-box__header .pf-c-modal-box__title", "Request Certificate")

            def fill(self):
                if self.ca:
                    b.select_from_dropdown("#ca", self.ca)
                if self.storage_type:
                    b.click(".pf-c-radio__input + label:contains({0})".format(self.storage_type))

                if self.storage_type == "NSSDB":
                    if self.nickname:
                        b.set_input_text("#nickname", self.nickname)
                else:
                    b.set_input_text("input[placeholder='Path to store the certificate']", self.cert_path)
                    b.click("#cert-file .pf-c-select__menu-item")
                    b.set_input_text("input[placeholder='Path to store the generated key or to an existing key']", self.key_path)
                    b.click("#key-file .pf-c-select__menu-item")

            def cancel(self):
                b.click(".pf-c-modal-box__footer button:contains(Cancel)")
                b.wait_not_present(".pf-c-modal-box")

            def create(self):
                b.click(".pf-c-modal-box__footer button:contains(Request)")
                b.wait_not_present(".pf-c-modal-box")
                time.sleep(4) # Certificate enrollment takes some time

            def verify_frontend(self):
                if not self.ca:
                    self.ca = b.text("#certificate-0-ca")
                if self.storage_type == "NSSDB" and not self.nickname:
                    self.nickname = b.text("#certificate-0-name")

                b.click("button#expandable-toggle0")
                if self.storage_type == "NSSDB":
                        b.wait_in_text("#certificate-0-name", self.nickname)
                        b.click("#certificate-0-cert-tab")
                        b.wait_in_text("#certificate-0-cert-storage", "NSSDB")
                        b.click("#certificate-0-keys-tab")
                        b.wait_in_text("#certificate-0-key-storage", "NSSDB")
                else:
                    if self.key_path:
                        b.click("#certificate-0-keys-tab")
                        b.wait_in_text("#certificate-0-key-location", self.key_path)
                    if self.cert_path:
                        b.click("#certificate-0-cert-tab")
                        b.wait_in_text("#certificate-0-cert-location", self.cert_path)

            def verify_backend(self):
                if self.storage_type == "NSSDB":
                    command_output = m.execute("getcert list -d /etc/pki/nssdb -n {0} -c {1} | grep 'key pair storage:' | awk '{{print $4}}'".format(self.nickname, self.ca))
                    self.test_obj.assertIn(command_output.strip(), "type=NSSDB,location='/etc/pki/nssdb',nickname='{0}',token='NSS\n".format(self.nickname))
                    command_output = m.execute("getcert list -d /etc/pki/nssdb -n {0} -c {1} | grep 'certificate:' | awk '{{print $2}}'".format(self.nickname, self.ca))
                    self.test_obj.assertIn(command_output.strip(), "type=NSSDB,location='/etc/pki/nssdb',nickname='{0}',token='NSS\n".format(self.nickname))
                elif self.storage_type == "File":
                    command_output = m.execute("getcert list -f {0} -c {1} | grep 'key pair storage:' | awk '{{print $4}}'".format(self.cert_path, self.ca))
                    self.test_obj.assertEqual(command_output, "type=FILE,location='{0}'\n".format(self.key_path))
                    command_output = m.execute("getcert list -f {0} -c {1} | grep 'certificate:' | awk '{{print $2}}'".format(self.cert_path, self.ca))
                    self.test_obj.assertEqual(command_output, "type=FILE,location='{0}'\n".format(self.cert_path))

            def cleanup(self):
                if self.storage_type == "NSSDB":
                    m.execute("getcert stop-tracking -d /etc/pki/nssdb -n {0} -c {1}".format(self.nickname, self.ca))
                else:
                    m.execute("getcert stop-tracking -f {0} -k {1} -c {2}".format(self.cert_path, self.key_path, self.ca))
                b.reload()
                b.enter_page('/certificates')

        # Test certificate request with everything pre-generated.
        RequestCertDialog(
            self,
        ).execute()

        # Test request of basic NSSDB stored certificate
        RequestCertDialog(
            self,
            ca="SelfSign",
            nickname="testcert1",
            storage_type="NSSDB",
        ).execute()

        # Test request of basic system file stored certificate
        RequestCertDialog(
            self,
            ca="SelfSign",
            cert_path="/etc/pki/tls/certs/testcert2.cert",
            key_path="/etc/pki/tls/private/testkey2.key",
            storage_type="File",
        ).execute()


if __name__ == '__main__':
    testlib.test_main()
